import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.springframework.boot.experimental.thin-launcher' version '1.0.31.RELEASE'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'portfolio'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2024.0.0")
}

shadowJar {
    archiveBaseName = 'dauntless'
    archiveClassifier = 'lambda'
    archiveVersion = ''

    manifest {
        inheritFrom(project.tasks.thinJar.manifest)
		attributes 'Main-Class': 'portfolio.dauntless.DauntlessApplication'
		attributes 'Start-Class': 'portfolio.dauntless.DauntlessApplication'
    }

    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    append 'META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports'
    append 'META-INF/spring/org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration.imports'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

assemble.dependsOn = [thinJar, shadowJar]

shadowJar.mustRunAfter = [thinJar]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-function-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-function-webflux'
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-api:2.8.5'
    implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.1'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets {
    integration {
        java {
            srcDir 'src/test/integration'
        }
        resources.srcDir 'src/test/integration/resources'
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    acceptance {
        java {
            srcDir 'src/test/acceptance'
        }
        resources.srcDir 'src/test/acceptance/resources'
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
    acceptanceImplementation.extendsFrom testImplementation
    acceptanceRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.named('test') {
    useJUnitPlatform()
}

// Unit tests (default 'test' task)
test {
    useJUnitPlatform {
        excludeTags "integration", "acceptance"
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

// Integration tests
tasks.register('integrationTest', Test) {
    useJUnitPlatform {
        includeTags "integration"
    }
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    shouldRunAfter test
}

// Acceptance tests
tasks.register('acceptanceTest', Test) {
    useJUnitPlatform {
        includeTags "acceptance"
    }
    testClassesDirs = sourceSets.acceptance.output.classesDirs
    classpath = sourceSets.acceptance.runtimeClasspath
    shouldRunAfter integrationTest
}

// Composite verification task
check.dependsOn integrationTest, acceptanceTest

tasks.withType(Test).configureEach {
    outputs.doNotCacheIf ("Disabling cache for integration/acceptance tests") {
        it.name.contains('integration') || it.name.contains('acceptance')
    }
}

